package org.mjelle.quarkus.easynats;

import static org.assertj.core.api.Assertions.*;

import io.nats.client.impl.Headers;
import java.util.UUID;
import java.util.regex.Pattern;
import org.junit.jupiter.api.Test;


class CloudEventsHeadersTest {

    // ISO 8601 pattern for validation
    private static final Pattern ISO_8601_PATTERN =
        Pattern.compile("\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}\\.\\d+Z");

    @Test
    void testGenerateIdReturnsValidUuidFormat() {
        String id = CloudEventsHeaders.generateId();
        assertThat(id).isNotNull().isNotBlank();

        // Verify it's a valid UUID by trying to parse it
        assertThatNoException().isThrownBy(() -> UUID.fromString(id));
    }

    @Test
    void testGenerateIdReturnsUniquIds() {
        String id1 = CloudEventsHeaders.generateId();
        String id2 = CloudEventsHeaders.generateId();

        assertThat(id1).isNotEqualTo(id2);
    }

    @Test
    void testGenerateTimeReturnsValidIso8601Format() {
        String time = CloudEventsHeaders.generateTime();
        assertThat(time).isNotNull().isNotBlank();

        // Verify ISO 8601 format
        assertThat(time).matches(ISO_8601_PATTERN);
    }

    @Test
    void testGenerateTypeReturnsFullyQualifiedClassName() {
        String type = CloudEventsHeaders.generateType(TestClass.class);
        assertThat(type).isEqualTo("org.mjelle.quarkus.easynats.CloudEventsHeadersTest.TestClass");
    }

    @Test
    void testGenerateSourceReturnsNonEmptyString() {
        String source = CloudEventsHeaders.generateSource();
        assertThat(source).isNotNull().isNotBlank();
    }

    @Test
    void testGenerateMetadataWithExplicitTypeAndSource() {
        CloudEventsHeaders.CloudEventsMetadata metadata =
            CloudEventsHeaders.generateMetadata(TestClass.class, "com.example.Order", "/order-service");

        assertThat(metadata.specVersion).isEqualTo("1.0");
        assertThat(metadata.type).isEqualTo("com.example.Order");
        assertThat(metadata.source).isEqualTo("/order-service");
        assertThat(metadata.dataContentType).isEqualTo("application/json");
        assertThat(metadata.id).isNotNull();
        assertThat(metadata.time).isNotNull();
    }

    @Test
    void testGenerateMetadataWithNullTypeAutoGenerates() {
        CloudEventsHeaders.CloudEventsMetadata metadata =
            CloudEventsHeaders.generateMetadata(TestClass.class, null, "/order-service");

        assertThat(metadata.type).contains("TestClass");
        assertThat(metadata.source).isEqualTo("/order-service");
    }

    @Test
    void testGenerateMetadataWithNullSourceAutoGenerates() {
        CloudEventsHeaders.CloudEventsMetadata metadata =
            CloudEventsHeaders.generateMetadata(TestClass.class, "com.example.Order", null);

        assertThat(metadata.type).isEqualTo("com.example.Order");
        assertThat(metadata.source).isNotNull().isNotBlank();
    }

    @Test
    void testGenerateMetadataWithNullBothAutoGenerates() {
        CloudEventsHeaders.CloudEventsMetadata metadata =
            CloudEventsHeaders.generateMetadata(TestClass.class, null, null);

        assertThat(metadata.type).contains("TestClass");
        assertThat(metadata.source).isNotNull().isNotBlank();
        assertThat(metadata.id).isNotNull();
        assertThat(metadata.time).isNotNull();
    }

    @Test
    void testGenerateMetadataIncludesAllRequiredFields() {
        CloudEventsHeaders.CloudEventsMetadata metadata =
            CloudEventsHeaders.generateMetadata(TestClass.class, "com.example.Event", "/app");

        assertThat(metadata.specVersion).isEqualTo("1.0");
        assertThat(metadata.type).isNotNull();
        assertThat(metadata.source).isNotNull();
        assertThat(metadata.id).isNotNull();
        assertThat(metadata.time).isNotNull();
        assertThat(metadata.dataContentType).isEqualTo("application/json");
    }

    @Test
    void testGenerateMetadataSpecVersionIsAlways1dot0() {
        CloudEventsHeaders.CloudEventsMetadata metadata =
            CloudEventsHeaders.generateMetadata(TestClass.class, "type", "source");

        assertThat(metadata.specVersion).isEqualTo("1.0");
    }

    @Test
    void testGenerateMetadataDatacontentTypeIsAlwaysJson() {
        CloudEventsHeaders.CloudEventsMetadata metadata =
            CloudEventsHeaders.generateMetadata(TestClass.class, "type", "source");

        assertThat(metadata.dataContentType).isEqualTo("application/json");
    }

    @Test
    void testGenerateMetadataIdIsAlwaysAutoGenerated() {
        CloudEventsHeaders.CloudEventsMetadata metadata1 =
            CloudEventsHeaders.generateMetadata(TestClass.class, "type", "source");
        CloudEventsHeaders.CloudEventsMetadata metadata2 =
            CloudEventsHeaders.generateMetadata(TestClass.class, "type", "source");

        assertThat(metadata1.id).isNotEqualTo(metadata2.id);
    }

    @Test
    void testGenerateMetadataTimeIsAlwaysAutoGenerated() {
        CloudEventsHeaders.CloudEventsMetadata metadata1 =
            CloudEventsHeaders.generateMetadata(TestClass.class, "type", "source");
        CloudEventsHeaders.CloudEventsMetadata metadata2 =
            CloudEventsHeaders.generateMetadata(TestClass.class, "type", "source");

        // Times should be different (unlikely to be exactly the same)
        assertThat(metadata1.time).isNotEqualTo(metadata2.time);
    }

    // Tests for createHeaders()

    @Test
    void testCreateHeadersWithExplicitTypeAndSource() {
        Headers headers = CloudEventsHeaders.createHeaders(TestClass.class, "com.example.Order", "/order-service");

        assertThat(headers.get(CloudEventsHeaders.HEADER_SPECVERSION)).hasSize(1)
            .contains("1.0");
        assertThat(headers.get(CloudEventsHeaders.HEADER_TYPE)).hasSize(1)
            .contains("com.example.Order");
        assertThat(headers.get(CloudEventsHeaders.HEADER_SOURCE)).hasSize(1)
            .contains("/order-service");
        assertThat(headers.get(CloudEventsHeaders.HEADER_DATACONTENTTYPE)).hasSize(1)
            .contains("application/json");
    }

    @Test
    void testCreateHeadersIncludesAllRequiredHeaders() {
        Headers headers = CloudEventsHeaders.createHeaders(TestClass.class, "com.example.Event", "/app");

        assertThat(headers.get(CloudEventsHeaders.HEADER_SPECVERSION)).isNotEmpty();
        assertThat(headers.get(CloudEventsHeaders.HEADER_TYPE)).isNotEmpty();
        assertThat(headers.get(CloudEventsHeaders.HEADER_SOURCE)).isNotEmpty();
        assertThat(headers.get(CloudEventsHeaders.HEADER_ID)).isNotEmpty();
        assertThat(headers.get(CloudEventsHeaders.HEADER_TIME)).isNotEmpty();
        assertThat(headers.get(CloudEventsHeaders.HEADER_DATACONTENTTYPE)).isNotEmpty();
    }

    // Helper test class
    static class TestClass {
        // Empty test class
    }
}
